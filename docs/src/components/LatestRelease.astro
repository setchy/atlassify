---
import { format, parseISO } from 'date-fns';
import { URLs } from '~/constants';
import { Icon } from 'astro-icon/components';
import type {
  Assets,
  DownloadLink,
  DownloadLinks,
  HeroData,
  LatestRelease,
} from '../types';

const getDownloadLinks = (assets: Assets[]): DownloadLinks => {
  const getAssetLink = (filenameRegex: RegExp): string => {
    const asset = assets.find((item) => item.name.match(filenameRegex));
    return asset ? asset.browser_download_url : URLs.HTML.LATEST_RELEASE;
  };

  const supportedOSs: DownloadLink[] = [
    {
      os: 'macOS',
      name: 'macOS (Apple Silicon)',
      url: getAssetLink(/Atlassify-\d+.\d+.\d+-arm64.dmg/g),
      isPrimary: true,
    },
    {
      os: 'macOS',
      name: 'macOS (Intel)',
      url: getAssetLink(/Atlassify-\d+.\d+.\d+.dmg/g),
    },
    {
      os: 'macOS',
      name: 'macOS (Universal)',
      url: getAssetLink(/Atlassify-\d+.\d+.\d+-universal.dmg/g),
    },
    {
      os: 'Windows',
      name: 'Windows',
      url: getAssetLink(/Atlassify-Setup-\d+.\d+.\d+.exe/g),
      isPrimary: true,
    },
    {
      os: 'Linux',
      name: 'Linux (AppImage)',
      url: getAssetLink(/Atlassify-\d+.\d+.\d+.AppImage/g),
      isPrimary: true,
    },
    {
      os: 'Linux',
      name: 'Linux (deb)',
      url: getAssetLink(/atlassify_\d+.\d+.\d+_amd64.deb/g),
    },
    {
      os: 'Linux',
      name: 'Linux (rpm)',
      url: getAssetLink(/atlassify-\d+.\d+.\d+.x86_64.rpm/g),
    },
  ];

  const primaryDownloadLinks = supportedOSs.filter(
    ({ isPrimary, url }) => url && isPrimary,
  );

  const altDownloadLinks = supportedOSs.filter(
    ({ isPrimary, url }) => url && !isPrimary,
  );

  return {
    primary: primaryDownloadLinks.length
      ? primaryDownloadLinks
      : [supportedOSs[0]],
    alt: altDownloadLinks,
  };
};

const loadInitialData = async (): Promise<HeroData> => {
  try {
    const response = await fetch(URLs.API.LATEST_RELEASE);
    const data: LatestRelease = await response.json();
    const parsedDate = parseISO(data.published_at.slice(0, -1));
    const downloadLinks = getDownloadLinks(data.assets);

    return {
      downloadLinks,
      version: data.tag_name,
      releaseDate: format(parsedDate, 'dd/MM/yyyy'),
    };
  } catch (error) {
    return {
      downloadLinks: {
        alt: [],
        primary: [],
      },
      version: '',
      releaseDate: '',
    };
  }
};

const { downloadLinks, version, releaseDate } = await loadInitialData();
---

<div class="text-sm mt-4">
  {
    version ? (
      <>
        <div class="sm:flex md:grid md:grid-cols-2">
          {downloadLinks.primary.map((item, index) => (
            <a
              href={item.url}
              class={`flex items-center mb-3 px-4 py-3 font-semibold text-white rounded-md bg-green-700 hover:bg-green-800 hover:text-white mr-4`}
            >
              <div class="flex flex-row gap-2 items-center">
                <Icon name="mdi:cloud-download" size={24} />
                <span>{item.name}</span>
              </div>
            </a>
          ))}
        </div>
        <div class="w-80">
          <p>Latest version: <a href={URLs.HTML.LATEST_RELEASE}>{version}</a></p>
          <p class="mt-1">Released on: {releaseDate}</p>
          {downloadLinks.alt.length > 0 && (
            <p class="mt-1">
              Also available on:
                <ul class="list-disc list-inside ml-4">
                  {downloadLinks.alt.map((platform) => (
                    <li>
                      <a href={platform.url || URLs.HTML.LATEST_RELEASE}>
                        {platform.name}
                      </a>
                    </li>
                  ))}
                </ul>
            </p>
          )}
        </div>
      </>
    ) : (
      <>
        <div class="flex">
          <a
            class="flex items-center mb-3 px-4 py-3 font-semibold text-white rounded-md bg-green-700 hover:bg-green-800"
            href={URLs.HTML.LATEST_RELEASE}
          >
            <Icon name="mdi:cloud-download" size={16} />
            <span>View GitHub Releases</span>
          </a>
        </div>
        <div>
          <div>Couldn&apos;t get latest version.</div>
        </div>
      </>
    )
  }
</div>
